swagger: '2.0'
info:
  description: This flie describes endpoints(API) of Apollo server.
  version: 0.0.1
  title: Apollo
  termsOfService: placeholder
  contact:
    email: arsenzhd@gamil.com
  license:
    name: placeholder
    url: 'http://placeholder'
host: placeholder.com
schemes:
  - http
paths:
  /registration:
    post:
      tags:
        - registration
      summary: Endpoint for registration
      parameters:
        - name: registrationForm
          description: Registration form.
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/UserData'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: If sucssesfully register user.
          schema:
            $ref: '#/components/schemas/RegistrationResponse'
        '400':
          description: If registration fails.
          schema:
            $ref: '#/components/schemas/ExceptionMessage'
  /signin:
    post:
      tags:
        - signin
      summary: Endpoint for login
      parameters:
        - name: signinForm
          description: Signin Form
          in: body
          required: true
          schema:
            $ref: '#/components/schemas/SigninForm'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: If sucssesfully login user.
          schema:
            $ref: '#/components/schemas/SigninResponse'
        '400':
          description: If invalid credentials was given
          schema:
            $ref: '#/components/schemas/ExceptionMessage'
  /signin/logout:
    get:
      tags:
        - signin
      summary: Endpoint for logout
      descrition: Logout and flush session for curent user.
      responses:
        '200':
          description: If sucssesfully logout user.
  /signin/deezer/step1:
    get:
      tags:
        - signin
      summary: Signin with deezer account
      description: The first step of signin
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '303':
          description: Redirect to deezer login form
        '400':
          description: If deezer not responded
  /signin/deezer/step2:
    get:
      tags:
        - signin
      summary: This is endpoint for deezer
      description: Deezer will call this enpoint with one time use code(for getting token)
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: code
          description: One time use code to get token.
          in: query
          required: false
          type: string
        - name: error
          description: Error from deezer.
          in: query
          required: false
          type: string
        - name: redirect_uri
          description: Redirect uri from deezer
          in: query
          required: true
          type: string
      responses:
        '301':
          description: redirect to /signin/deezer/step3
        '403':
          description: If user decide to not give us required permissions for deezer data
  /signin/deezer/step3:
    get:
      tags:
        - signin
      summary: This endpoint is geting user information from deezer api using token
      description: >-
        After get this information we register or/and signin user in our
        application
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: If sucsessfully signin user
          schema:
            $ref: '#/components/schemas/UserData'
        '400':
          description: If cant register or signin user.
  /chart:
    get:
      tags:
        - music
      summary: This endpoint for getting most popular playlist and tracks
      description: Return list of playlists andlist of tracks
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: sucsess
          schema:
            $ref: '#/components/schemas/Chart'
        '400':
          description: Top information.
        '403':
          description: If un authorized user tries to access this endpoint.
  '/playlist/{id}':
    get:
      tags:
        - music
      summary: This endpoint for getting playlist by id
      description: 'Return playlist with {id}'
      consumes:
        - application/json
      produces:
        - application/json
      parameters: 
        - name: id
          in: query
          description: Playist id.
          type: string
      responses:
        '200':
          description: sucsess
          schema:
            $ref: '#/components/schemas/Playlist'
        '400':
          description: Playlist information.
        '403':
          description: If un authorized user tries to access this endpoint.
  '/track/{id}':
    get:
      tags:
        - music
      summary: This endpoint for getting tracks by id
      description: 'Return track by {id}'
      parameters: 
        - name: id
          in: query
          description: Track id.
          type: string
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: sucsess
          schema:
            $ref: '#/components/schemas/Track'
        '400':
          description: Track information.
        '403':
          description: If un authorized user tries to access this endpoint.
components:
  schemas:
    UserData:
      type: object
      properties:
        username:
          type: string
          description: The user name. Min length 5,  Max length 16.
          regex: [a-zA-Z0-9_.]
        password:
          type: string
          description: Password. Min length 8, max length 32.
          regex: [a-zA-Z0-9_]
        email:
          type: string
          description: email
    RegistrationResponse:
      type: object
      properties:
        username:
          type: string
          description: The user name.
        email:
          type: string
          description: email
        message:
          type: string
          description: Message from API.
    ExceptionMessage:
      type: object
      properties:
        message:
          type: string
          description: Message with reason why fail.
    SigninForm: 
      type: object
      properties:
        username: 
          type: string
        password:
          type: string
    SigninResponse: 
      type: object
      properties:
        username: 
          type: string
        email: 
          type: string
        message: 
          type: string
          description: Signin message.
    Chart:
      type: object
      properties:
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
          description: Top tracks.
        playlists:
          type: array
          items:
            $ref: '#/components/schemas/Playlist'
          description: Top playlists.
    Playlist:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        pictureMedium:
          type: string
          desciption: url of picture
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
          description: tracks of playlist.
    Track:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        preview:
          type: string
          desciption: url of picture
        link:
          type: string
        duration:
          type: integer
          format: int32

